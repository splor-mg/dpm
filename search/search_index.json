{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Package Manager (dpm)","text":"<p>Description: A package for install, update and manage sources of sets of datapackages</p> <p>Version: 0.0.0-9016</p> <p>Dependencies:</p> <ul> <li> <p>frictionless</p> </li> <li> <p>pandas</p> </li> <li> <p>requests</p> </li> <li> <p>typer (version &gt;= 0.9)</p> </li> <li> <p>unidecode</p> </li> <li> <p>python-dotenv</p> </li> <li> <p>tomli (version &gt;= 1.1.0)  if Python version &lt; \"3.11\"</p> </li> <li> <p>openpyxl</p> </li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#getting-started-with-data-package-manager-dpm","title":"Getting Started with Data Package Manager (DPM)","text":"<p>To get started with the Data Package Manager, you can install it using:</p> <pre><code>pip install dpm\n</code></pre> <p>DPM simplifies the process of installing (downloading) data resources described in Frictionless data package descriptors and provides a set of functionalities to manage them.</p> <p>If you have a valid data package descriptor, such as a <code>datapackage.json</code> file, you can use the command <code>dpm install</code> to download its data sources in a structured way to your local machine.</p>"},{"location":"getting_started/#step-1-create-a-configuration-file","title":"Step 1: Create a Configuration File","text":"<p>Begin by creating a file named <code>data.toml</code> in the root of your project, containing the metadata for the data packages you want to use:</p> <pre><code># file: data.toml\n[packages]\n\n[packages.your_datapackage_name]\npath = \"https://raw.githubusercontent.com/your-org/your_repo/datapackage.json\"\ntoken = \"your_github_pat_if_needed_to_access_private_repositories\"\n</code></pre>"},{"location":"getting_started/#step-2-install-the-data-packages","title":"Step 2: Install the Data Packages","text":"<p>Next, run the following command:</p> <pre><code>dpm install\n</code></pre> <p>This command will access the <code>datapackage.json</code> located at the specified URL in your <code>data.toml</code> file. The resources described in the <code>datapackage.json</code> will be downloaded and saved in the <code>datapackages</code> folder by default.</p> <p>For each resource, a subfolder named <code>your_datapackage_name</code> will be created, and the data package descriptor will also be downloaded:</p> <pre><code>.\n\u2514\u2500\u2500 your_project_name/\n    \u251c\u2500\u2500 datapackages/\n    \u2502   \u251c\u2500\u2500 your_datapackage_name/\n    \u2502   \u2502   \u251c\u2500\u2500 resource1.csv\n    \u2502   \u2502   \u2514\u2500\u2500 resource2.xlsx\n    \u2502   \u2514\u2500\u2500 datapackage.json\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 data.toml\n    \u2514\u2500\u2500 main.py\n</code></pre>"},{"location":"reference/","title":"Commands Reference","text":""},{"location":"reference/#dpm-install","title":"dpm install","text":"<p>Download and install data packages listed in a descriptor file.</p> <p>This command-line interface (CLI) function reads a TOML descriptor file that specifies data packages and their associated resources. It downloads the specified packages and saves them into a designated output directory. This functionality is particularly useful for managing datasets and ensuring that the necessary resources are readily available for use.</p> <p>Parameters:</p> Name Type Description Default <code>descriptor</code> <code>Path</code> <p>The path to the TOML file containing the package descriptors. The default value is \"data.toml\". This file should define the sources from which the data packages will be downloaded.</p> <code>Path('data.toml')</code> <code>output_dir</code> <code>Path</code> <p>The directory where the downloaded data packages and resources will be saved. The default is \"datapackages\". This directory will be created if it does not exist.</p> <code>Path('datapackages')</code> Example <p>To install data packages from a specified TOML descriptor file:</p> <pre><code>dpm install data.toml --output-dir datapackages\n</code></pre> <p>This command will read the <code>data.toml</code> file, download the listed data packages, and save them into the <code>datapackages</code> folder.</p>"},{"location":"reference/#dpm-load","title":"dpm load","text":"<p>Load data packages into the database.</p> <p>This command-line interface (CLI) function loads data packages defined in a TOML manifest file into a specified database. It ensures that any necessary control tables are created, checks for existing resources to determine if they need to be updated, and handles the loading of resources based on their checksums. If a specific package is provided, it will load only that package; otherwise, it will load all packages defined in the manifest.</p> <p>Parameters:</p> Name Type Description Default <code>manifest</code> <code>Path</code> <p>The path to the TOML file that contains the data package descriptors. The default value is \"data.toml\". This file should list all the packages to be loaded into the database.</p> <code>Path('data.toml')</code> <code>package</code> <code>Path</code> <p>The path to a specific data package (datapackage.json) to load. If provided, only this package will be loaded; otherwise, all packages from the manifest will be processed.</p> <code>None</code> Example <p>To load data packages defined in a manifest file:</p> <pre><code>dpm load data.toml\n</code></pre> <p>To load a specific data package:</p> <pre><code>dpm load data.toml --package datapackages/package_name/datapackage.json\n</code></pre> <p>This command will read the <code>data.toml</code> file and load the specified data package into the database, ensuring that control tables are managed appropriately.</p>"},{"location":"reference/#dpm-concat","title":"dpm concat","text":"<p>Concatenate resources from multiple data packages into a single CSV file.</p> <p>This command-line interface (CLI) function allows the user to specify a pattern to match multiple data package files, or to provide a list of specific packages. The function concatenates resources from these packages based on the provided resource name(s) and optionally enriches the resulting DataFrame with additional identifier columns.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>Optional[str]</code> <p>A glob pattern to match data package filenames in the current directory. If provided, packages matching this pattern will be included in the concatenation process.</p> <code>None</code> <code>package</code> <code>list[str]</code> <p>A list of specific data package filenames to include in the concatenation. If both <code>pattern</code> and <code>package</code> are provided, <code>package</code> will be included in the result alongside those matched by <code>pattern</code>.</p> <code>None</code> <code>resource_name</code> <code>list[str]</code> <p>A list of resource names to concatenate from the specified packages. If not provided, the function will attempt to find common resource names across all packages. If there are no common resource names, a message will be printed and the function will exit.</p> <code>None</code> <code>enrich</code> <code>list[str]</code> <p>A list of key-value pairs for enriching the DataFrame. Each pair should be in the format \"key=value\", where <code>key</code> is the name of the new column to create, and <code>value</code> is the property from the data package to use for populating that column. This option is used to add additional identifier columns to the concatenated output.</p> <code>None</code> <code>output_dir</code> <code>Path</code> <p>The directory where the output CSV files will be saved. Defaults to 'data'. This directory will be created if it does not already exist.</p> <code>Path('data')</code> Example <p>To concatenate resources with the same name from all packages matching a pattern:</p> <pre><code>python script.py concat \"*.json\" --enrich \"year=year\"\n</code></pre> <p>This command will match all JSON files in the current directory, concatenate the common resources, and add a new column <code>year</code> populated from the data package property <code>year</code>.</p>"}]}